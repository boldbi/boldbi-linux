@{
    Layout = null;
    bool isSelfHosted = ServerAppConfig.IsSelfHosted;
    var dashboardServerResourceUrl = _globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    var uploadDashboardStatus = ViewBag.UploadProcessJson as BackgroundJobStatus;
    var toastURL = GlobalAppSettings.CdnDomain + "/success-toast.svg";
    var uploadDashboardId = ViewBag.ItemId;
    var toCategoryId = ViewBag.CategoryId;
    var isSuccess = uploadDashboardStatus.Status == DownloadandUploadJobStatus.Success;
    var isStatusSccessOrFailed = uploadDashboardStatus.Status == DownloadandUploadJobStatus.Success || uploadDashboardStatus.Status == DownloadandUploadJobStatus.Failed;
    var isAnyOneIsInProgress = uploadDashboardStatus.Stages.Any(x => x.Status == DownloadandUploadJobStatus.InProgress);
}

<div id="PopupContainer" class="dialog">
    <div id="UploadProgressStages" class="col-xs-12 no-padding">
        <ul id="uploadprogress" class="col-xs-12 no-padding">
            @{
                foreach (var i in uploadDashboardStatus.Stages)
                {
                    if (i.Status == DownloadandUploadJobStatus.Success)
                    {
                        <li class="col-xs-12 no-padding">
                            <i class="su su-success col-xs-2 no-padding"><span class="su-success path1"></span><span class="su-success path2"></span></i>
                            <span class="progress-info col-xs-10 no-padding">@i.Label</span>
                        </li>
                    }
                    else if (i.Status == DownloadandUploadJobStatus.Failed)
                    {
                        <li class="col-xs-12 no-padding">
                            <i class="su su-failure col-xs-2 no-padding"><span class="su-failure path1"></span><span class="su-failure path2"></span><span class="su-failure path3"></span><span class="su-failure path4"></span></i>
                            <span class="progress-info col-xs-10 no-padding">
                                @i.Label
                                @if(uploadDashboardStatus.ErrorType == ErrorType.Dashboard)
                                {
                                    <i class="su su-retry" id="server-retry-icon"></i>
                                    <span class="retry-label" id="upload-server-retry">@T["Retry"]</span>
                                }
                                else if (uploadDashboardStatus.ErrorType == ErrorType.DataSource)
                                {
                                    <i class="su su-retry" id="designer-retry-icon"></i>
                                    <span class="retry-label" id="upload-designer-retry">@T["Retry"]</span>
                                }
                                <span id="error-message" style="display: none;">@i.ErrorMessage</span><span id="click-know-more">@T["Know more"]</span>
                            </span>                                                       
                        </li>

                    }
                    else if (i.Status == DownloadandUploadJobStatus.InProgress)
                    {
                        <li class="col-xs-12 no-padding">
                            <div class="loader-blue loader-icon col-xs-2 no-padding" id="upload-dashboard-progress-loader-icon"><svg class="circular"><circle class="path" cx="8" cy="8" r="6" fill="none" stroke-width="2" stroke-miterlimit="10"></circle></svg></div>
                            <span class="progress-info col-xs-10 no-padding">@i.Label</span>
                        </li>

                    }
                    else if (i.Status == DownloadandUploadJobStatus.YetToStart)
                    {
                        <li class="col-xs-12 no-padding">
                            <i class="col-xs-2 no-padding yet-to-start su su-schedule-status"></i>
                            <span class="progress-info col-xs-10 no-padding">@i.Label</span>
                        </li>
                    }
                }
            }
        </ul>
        <div id="upload-dashboards-info" class="col-xs-12 display-none">
            <span class="col-xs-1 dropdown-toggle no-padding" data-toggle="dropdown"><span class="su su-info" title=""></span></span>
            <label class="col-xs-11 no-padding">@T["You can close this dialog at any time. The upload process will run in the background and you can check the status of this upload again from the draft items. Once the dashboard is uploaded successfully, it will be available under the respective category."]</label>
        </div>
    </div>
</div>
<input type="hidden" id="uploaddashbord-id" value="@uploadDashboardId" />
<input type="hidden" id="category_id" value="@toCategoryId" />
<input type="hidden" id="upload_status" value="@isAnyOneIsInProgress.ToString()" />
@await Html.PartialAsync("~/Views/Shared/_LoaderIcon.cshtml")
<script>
    var isStatusDialog = @Json.Serialize(ViewBag.IsStatusDialog);
    var isSuccess = @Json.Serialize(isSuccess);
    var isStatusSccessOrFailed = @Json.Serialize(isStatusSccessOrFailed);
</script>