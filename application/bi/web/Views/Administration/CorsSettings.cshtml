@{
    var globalAppSettings = _globalAppSettings;
    ViewBag.Title = T["CORS Settings"].Value + " - " + globalAppSettings.SystemSettings.OrganizationName;
    ViewBag.MessageBox = false;
    ViewBag.HelpSiteUrl = GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.DataStoreSettings);
    var dashboardServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    var helpSiteBaseUrl = ServerAppConfig.AppSettings.Documentation.BaseUri;
    var corsSettings = ViewBag.CorsSettings != null ? ViewBag.CorsSettings : new CORS();
    var allowedOrigins = corsSettings.AllowedOrigins != null ? corsSettings.AllowedOrigins.Split(',') : corsSettings.AllowedOrigins;
    var allowedHeaders = corsSettings.AllowedHeaders != null ? corsSettings.AllowedHeaders.Split(',') : corsSettings.AllowedHeaders;
    var allowedExposeHeaders = corsSettings.ExposeHeaders != null ? corsSettings.ExposeHeaders.Split(',') : corsSettings.ExposeHeaders;
    var preflightMaxAge = corsSettings.PreflightMaxAge != "" ? corsSettings.PreflightMaxAge : 5;
    bool isSelfHosted = ServerAppConfig.IsSelfHosted;
    var isMaster = globalAppSettings.SystemSettings.IsMaster;
    var model = ViewBag.GranularPermissions as Dictionary<object, bool>;
    var scopeList = ServerAppConfig.SettingsScopesList;
    var canShowAdminMenu = _identityResponse.IsAdmin || model[SettingsScopes.All] || model.Select(x => x).Where(x => scopeList.Contains(x.Key.ToString()) && x.Value == true).Count() > 1 || (model.Select(x => x).Where(x => scopeList.Contains(x.Key.ToString()) && x.Value == true).Count() == 1 && (model[PermissionEntity.UsersandGroups] || model[PermissionEntity.SpecificGroup] || model[PermissionEntity.AllGroups])) || model[PermissionEntity.UsersandGroups];
    ViewBag.HelpSiteUrl = GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.CORSSettings);
}


@section styles{
    <environment include="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/site-settings.css" />
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/site-settings.min.css" />
    </environment>
}
@section scripts{
    <environment include="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/site-settings.js"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/site-settings.min.js"></script>
    </environment>
    <script>
        var dashboardServerResourceUrl = "@globalAppSettings.SystemSettings.CDNLink";
        var updateCorsSettingsUrl = "@Url.Action("UpdateCorsSettings", "Administration")";
        var allowedOriginsList = @Html.Raw(Json.Serialize(allowedOrigins));
        var allowedHeadersList = @Html.Raw(Json.Serialize(allowedHeaders));
        var allowedExposeHeadersList = @Html.Raw(Json.Serialize(allowedExposeHeaders));
    </script>
}

@section MainSection{

    @await Html.PartialAsync("_AdminMenu")

    <div id="security-container" class="bi-page-container @(canShowAdminMenu ? string.Empty : "admin-panel-full-width")">
        <div class="bi-page-content col-xs-12 no-padding">
            <div class="bi-page-header col-xs-12 @((!isSelfHosted || isMaster) ? "tabs-header-padding" : string.Empty)" id="security-settings-page">
                <div id="security-settings-header" class="col-xs-12 no-padding">
                    <hgroup class="bi-page-header-description">
                        <h1 class="h2 page-title">
                            @T["CORS Policy"]
                        </h1>
                        <h5 class="page-description">
                            @T["Configure CORS settings for your site."]
                        </h5>
                    </hgroup>
                </div>
            </div>
            <div class="col-xs-12 bi-page-body" id="cors-settings">
                <div id="cors-settings-body" class="col-xs-12 no-padding">
                    <form id="cors-settings-form" class="no-padding col-xs-12 no-padding content-display text-wrap" autocomplete="off">
                        <div class="col-xs-12 no-padding enable-cors settings-page-fields">
                            <div class="col-xs-12 no-padding">
                                <div class="info-label">
                                    @Html.CheckBox("enable-cors", (bool)corsSettings.EnableCors, new { @class = "material-checkbox" })
                                    @Html.Hidden("enable-cors")
                                    <label for="enable-cors">
                                        @T["Customize CORS Policy"]
                                    </label>
                                </div>
                                <div class="info-message">
                                    @T["You can configure a custom policy for your site. The default policy will be applied if this option is disabled."]
                                </div>
                            </div>
                        </div>
                        <div class="col-xs-12 no-padding settings-page-fields form-fields-top-margin origin-names-list">
                            <div class="info-label">
                                @Html.Label("allowed-origins", T["Allowed Origins"].Value, new { @class = "app-textbox-label" })
                            </div>
                            <div class="info-message">
                                @T["The specified origins will be able to access the resource. By default, all origins will be allowed."]
                            </div>
                            <span id="origin-name-content" class="origin-names-input">
                                <span id="origin-chip-content" class="origin-names-chip"></span>
                                <input id="txt-allowedorigins" autocomplete="off" class="form-control validation-padding txt-holder" placeholder="@T["Enter the list of origins separated by commas"]" maxlength="253">
                            </span>
                            <span class="origin-name-validation validation-errors"></span>
                        </div>
                        <div class="col-xs-12 no-padding settings-page-fields form-fields-top-margin">
                            <div class="info-label">
                                @Html.Label("allowed-methods", T["Allowed Methods"].Value, new { @class = "app-textbox-label" })
                            </div>
                            <div class="info-message">
                                @T["The specified methods will be able to access the resource. They will be used in response to a preflight request."]
                            </div>
                            <div id="allowed-methods-dropdown" class="dropdown txt-holder no-padding">
                                @Html.DropDownList("allowed-methods", ViewBag.AllowedMethods as IEnumerable<SelectListItem>, new { id = "allowed-methods", @class = "selectpicker form-control", @multiple = "", data_none_results_text = T["No results match"].Value, data_size = "10", title = T["Select Method"].Value, data_live_search = "true", data_live_search_placeholder = T["Search"].Value, })
                            </div>
                        </div>
                        <div class="col-xs-12 no-padding settings-page-fields form-fields-top-margin headers-names-list">
                            <div class="info-label">
                                @Html.Label("allowed-headers", T["Allowed Headers"].Value, new { @class = "app-textbox-label" })
                            </div>
                            <div class="info-message">
                                @T["The specified HTTP headers can be used when making an actual request. They are used in response to a preflight request."]
                            </div>
                            <span id="headers-name-content" class="headers-names-input">
                                <span id="headers-chip-content" class="headers-names-chip"></span>
                                <input id="txt-allowedheaders" autocomplete="off" class="form-control validation-padding txt-holder" placeholder="@T["Enter the list of headers separated by commas"]" maxlength="253">
                            </span>
                        </div>
                        <div id="cors-allowed-credentials-dropdown" class="col-xs-12 no-padding settings-page-fields form-fields-top-margin">
                            <div class="info-label">
                                @Html.Label("allowed-credentials", T["Allow Credentials"].Value, new { @class = "app-textbox-label" })
                            </div>
                            <div class="info-message">
                                @T["When Allow Credentials is set to true, browsers are notified whether to expose the response to front-end JavaScript code."]
                            </div>
                            <div id="allowed-credentials-dropdown" class="txt-holder validation-padding">
                                <select id="allowed-credentials" class="selectpicker no-padding" @((bool)!corsSettings.EnableCors ? "disabled" : string.Empty)>
                                    <option value="true" selected="@(corsSettings.AllowCredentials == true)">@T["True"]</option>
                                    <option value="false" selected="@(corsSettings.AllowCredentials == false)">@T["False"]</option>
                                </select>
                            </div>
                            <span class="credentials-name-validation validation-errors"></span>
                        </div>
                        <div class="col-xs-12 no-padding settings-page-fields form-fields-top-margin expose-headers-names-list">
                            <div class="info-label">
                                @Html.Label("expose-headers", T["Expose Headers"].Value, new { @class = "app-textbox-label" })
                            </div>
                            <div class="info-message">
                                @T["This field value allows a server to specify which response headers should be exposed to browser-based scripts."]
                            </div>
                            <span id="expose-headers-name-content" class="expose-headers-names-input">
                                <span id="expose-headers-chip-content" class="expose-headers-names-chip"></span>
                                <input id="txt-exposeheaders" autocomplete="off" class="form-control validation-padding txt-holder" placeholder="@T["Enter the list of expose headers separated by commas"]" maxlength="253">
                            </span>
                        </div>
                        <div class="col-xs-12 no-padding settings-page-fields form-fields-top-margin pre-flight-bottom-margin">
                            <div class="info-label">
                                @Html.Label("pre-flight-max-age", T["Preflight Max-Age"].Value, new { @class = "app-textbox-label" })
                            </div>
                            <div class="info-message">
                                @T["This field value specifies the maximum time a preflight request's results can be cached."]
                            </div>
                            <input type="text" id="txt-preflightmaxage" name="preflight_maxage" class="form-control validation-padding txt-holder" value="@preflightMaxAge" placeholder="@T["Pre flight max age"]" autocomplete="off" @((bool)!corsSettings.EnableCors ? "disabled" : string.Empty)>
                            <span class="validation-errors"></span>
                        </div>
                    </form>
                </div>
                <div class="bi-page-footer col-xs-12 no-padding">
                    <div class="bi-page-actions col-xs-12 col-md-12 no-margin">
                        <a href="@Url.Action("Index", "Home")" class="secondary-button app-btn-secondary pull-right" id="cancel-site-settings" title="">@T["Cancel"]</a>
                        <button type="button" title="" id="update-cors-settings" name="UpdateSystemSettings" class="primary-button app-btn-primary pull-right">
                            @T["Save"]
                        </button>
                    </div>
                </div>
            </div>
        </div>
        @await Html.PartialAsync("../Shared/_Footer", new ViewDataDictionary(ViewData) { { "appsettings", globalAppSettings } })
     </div>
    <environment include="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/cors-settings.js"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/cors-settings.min.js"></script>
    </environment>
}