@{
    var globalAppSettings = _globalAppSettings;
    ViewBag.Title = T["Security Settings"].Value + " - " + globalAppSettings.SystemSettings.OrganizationName;
    var dashboardServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    bool isSelfHosted = ServerAppConfig.IsSelfHosted;
    var isCSPTab = (string.IsNullOrWhiteSpace(Context.Request.Query["tab"]) || Context.Request.Query["tab"] == "csp-settings") ? "active" : string.Empty;
    var isXFrameTab = (Context.Request.Query["tab"].ToString() == "x-frame-options") ? "active" : string.Empty;
    var model = ViewBag.GranularPermissions as Dictionary<object, bool>;
    var scopeList = ServerAppConfig.SettingsScopesList;
    var canShowAdminMenu = _identityResponse.IsAdmin || model[SettingsScopes.All] || model.Select(x => x).Where(x => scopeList.Contains(x.Key.ToString()) && x.Value == true).Count() > 1 || (model.Select(x => x).Where(x => scopeList.Contains(x.Key.ToString()) && x.Value == true).Count() == 1 && (model[PermissionEntity.UsersandGroups] || model[PermissionEntity.SpecificGroup] || model[PermissionEntity.AllGroups])) || model[PermissionEntity.UsersandGroups];
    var contentSecurityPolicySettings = ViewBag.ContentSecurityPolicySettings != null ? ViewBag.ContentSecurityPolicySettings : new ContentSecurityPolicy();
    var styleSources = contentSecurityPolicySettings.StyleSource != null ? contentSecurityPolicySettings.StyleSource.Split(',') : contentSecurityPolicySettings.StyleSource;
    var scriptSources = contentSecurityPolicySettings.ScriptSource != null ? contentSecurityPolicySettings.ScriptSource.Split(',') : contentSecurityPolicySettings.ScriptSource;
    var fontSources = contentSecurityPolicySettings.FontSource != null ? contentSecurityPolicySettings.FontSource.Split(',') : contentSecurityPolicySettings.FontSource;
    var imgSources = contentSecurityPolicySettings.ImageSource != null ? contentSecurityPolicySettings.ImageSource.Split(',') : contentSecurityPolicySettings.ImageSource;
    var connectSources = contentSecurityPolicySettings.ConnectSource != null ? contentSecurityPolicySettings.ConnectSource.Split(',') : contentSecurityPolicySettings.ConnectSource;
    var frameSources = contentSecurityPolicySettings.FrameSource != null ? contentSecurityPolicySettings.FrameSource.Split(',') : contentSecurityPolicySettings.FrameSource;
    var helpSiteBaseUrl = ServerAppConfig.AppSettings.Documentation.BaseUri;
    var CSPHelpSiteUrl = GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.ContentSecurityPolicy);
}

@section styles{
    <environment include="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/site-settings.css" />
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@dashboardServerResourceUrl/cdn/css/site-settings.min.css" />
    </environment>
}

@section scripts{
    <environment include="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/site-settings.js"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/site-settings.min.js"></script>
    </environment>
    <script>
        var updateCSPSettingsUrl = "@Url.Action("UpdateSecuritySettings", "Administration")";
        var updateXFrameHeaderSettingsUrl= "@Url.Action("UpdateXFrameHeaderSettings", "Administration")";
        var styleSourcesList = @Html.Raw(Json.Serialize(styleSources));
        var scriptSourcesList = @Html.Raw(Json.Serialize(scriptSources));
        var fontSourcesList = @Html.Raw(Json.Serialize(fontSources));
        var imgSourcesList = @Html.Raw(Json.Serialize(imgSources));
        var connectSourcesList = @Html.Raw(Json.Serialize(connectSources));
        var frameSourcesList = @Html.Raw(Json.Serialize(frameSources));
        var contentSecurityPolicyUrl = helpSiteBaseUrl + "@GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.ContentSecurityPolicy)";
        var xFrameOptionUrl = helpSiteBaseUrl + "@GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.XFrameOption)";
    </script>
}


@section MainSection{

    @await Html.PartialAsync("_AdminMenu")

    <div id="security-container" class="bi-page-container @(canShowAdminMenu ? string.Empty : "admin-panel-full-width")">
        <div class="bi-page-content col-xs-12 no-padding">
            <div class="bi-page-header col-xs-12" id="security-settings-page">
                <div id="security-settings-header" class="col-xs-12 no-padding">
                    <hgroup class="bi-page-header-description">
                        <h1 class="h2 page-title">
                            @T["Security"]
                        </h1>
                        <h5 class="page-description">
                            @T["Configure security-related settings for your site."]
                        </h5>
                    </hgroup>
                </div>
            </div>

            <div class="col-xs-12 no-padding bi-page-nav-bar">
                <ul id="cors-tab-nav" class="nav nav-tabs" role="tablist">
                    <li role="presentation" class="@isCSPTab">
                        <a href="#csp-settings" id="csp-settings-tab" aria-controls="csp-settings-tab" role="tab" data-toggle="tab">@T["Content Security Policy"]</a>
                    </li>
                    <li role="presentation" class="@isXFrameTab">
                        <a href="#x-frame-options" id="x-frame-options-tab" aria-controls="x-frame-options-tab" role="tab" data-toggle="tab">@T["X-Frame-Options"]</a>
                    </li>
                </ul>
            </div>
            <div class="tab-content col-xs-12 no-padding">
                <div role="tabpanel" class="tab-pane bi-page-body @isCSPTab" id="csp-settings">
                    <div id="csp-settings-body" class="col-xs-12 no-padding">
                        <form id="csp-settings-form" class="no-padding col-xs-12 no-padding content-display text-wrap" autocomplete="off">
                            <div class="col-xs-12 no-padding enable-csp settings-page-fields">
                                <div class="col-xs-12 no-padding">
                                    <div class="info-label">
                                        @Html.CheckBox("enable-csp", (bool)contentSecurityPolicySettings.EnableCSP, new { @class = "material-checkbox" })
                                        @Html.Hidden("enable-csp")
                                        <label for="enable-csp">
                                            @T["Enable Content-Security-Policy"]
                                        </label>
                                    </div>
                                    <div class="info-message">
                                        @T["You can configure a content security policy (CSP) for your site. CSP will not be applied if this option is disabled."] @Html.Raw(string.Format(T["Click {0}here{1} to learn more."].Value, "<a class='app-hyperlink' href='" + helpSiteBaseUrl + CSPHelpSiteUrl + "' target='_blank'>", "</a>"))
                                    </div>
                                </div>
                            </div>
                            <div class="col-xs-12 no-padding settings-page-fields form-fields-top-margin src-names-list">
                                <div class="info-label">
                                    @Html.Label("style-src", T["Style Source"].Value, new { @class = "app-textbox-label" })
                                </div>
                                <div class="info-message">
                                    @T["This directive specifies valid sources for stylesheets."]
                                </div>
                                <span id="style-src-content" class="style-src-input src-input-class">
                                    <span id="style-src-chip-content" class="style-src-chip src-input-chip"></span>
                                    <input id="txt-stylesrc" autocomplete="off" class="form-control validation-padding txt-holder txt-input-src" placeholder="@T["Enter a list of URLs separated by commas"]" maxlength="253">
                                </span>
                                <span class="style-src-validation validation-errors"></span>
                            </div>
                            <div class="col-xs-12 no-padding settings-page-fields form-fields-top-margin src-names-list">
                                <div class="info-label">
                                    @Html.Label("script-src", T["Script Source"].Value, new { @class = "app-textbox-label" })
                                </div>
                                <div class="info-message">
                                    @T["This directive specifies valid sources for JavaScript."]
                                </div>
                                <span id="script-src-content" class="script-src-input src-input-class">
                                    <span id="script-src-chip-content" class="script-src-chip src-input-chip"></span>
                                    <input id="txt-scriptsrc" autocomplete="off" class="form-control validation-padding txt-holder txt-input-src" placeholder="@T["Enter a list of URLs separated by commas"]" maxlength="253">
                                </span>
                                <span class="script-src-validation validation-errors"></span>
                            </div>
                            <div class="col-xs-12 no-padding settings-page-fields form-fields-top-margin src-names-list">
                                <div class="info-label">
                                    @Html.Label("font-src", T["Font Source"].Value, new { @class = "app-textbox-label" })
                                </div>
                                <div class="info-message">
                                    @T["This directive specifies valid sources for fonts."]
                                </div>
                                <span id="font-src-content" class="font-src-input src-input-class">
                                    <span id="font-src-chip-content" class="font-src-chip src-input-chip"></span>
                                    <input id="txt-fontsrc" autocomplete="off" class="form-control validation-padding txt-holder txt-input-src" placeholder="@T["Enter a list of URLs separated by commas"]" maxlength="253">
                                </span>
                                <span class="font-src-validation validation-errors"></span>
                            </div>
                            <div class="col-xs-12 no-padding settings-page-fields form-fields-top-margin src-names-list">
                                <div class="info-label">
                                    @Html.Label("img-src", T["Image Source"].Value, new { @class = "app-textbox-label" })
                                </div>
                                <div class="info-message">
                                    @T["This directive specifies valid sources for images."]
                                </div>
                                <span id="img-src-content" class="img-src-input src-input-class">
                                    <span id="img-src-chip-content" class="img-src-chip src-input-chip"></span>
                                    <input id="txt-imgsrc" autocomplete="off" class="form-control validation-padding txt-holder txt-input-src" placeholder="@T["Enter a list of URLs separated by commas"]" maxlength="253">
                                </span>
                                <span class="img-src-validation validation-errors"></span>
                            </div>
                            <div class="col-xs-12 no-padding settings-page-fields form-fields-top-margin src-names-list">
                                <div class="info-label">
                                    @Html.Label("conconnecttent-src", T["Connect Source"].Value, new { @class = "app-textbox-label" })
                                </div>
                                <div class="info-message">
                                    @T["This directive specifies the sources that can be used to make Fetch/XHR requests."]
                                </div>
                                <span id="connect-src-content" class="connect-src-input src-input-class">
                                    <span id="connect-src-chip-content" class="connect-src-chip src-input-chip"></span>
                                    <input id="txt-connectsrc" autocomplete="off" class="form-control validation-padding txt-holder txt-input-src" placeholder="@T["Enter a list of URLs separated by commas"]" maxlength="253">
                                </span>
                                <span class="connect-src-validation validation-errors"></span>
                            </div>
                            <div class="col-xs-12 no-padding settings-page-fields form-fields-top-margin src-names-list bottom-src-bottom-margin">
                                <div class="info-label">
                                    @Html.Label("frame-src", T["Frame Source"].Value, new { @class = "app-textbox-label" })
                                </div>
                                <div class="info-message">
                                    @T["This directive specifies valid sources for the nested document using elements like &lt;frame&gt; and &lt;iframe&gt;."]
                                </div>
                                <span id="frame-src-content" class="frame-src-input src-input-class">
                                    <span id="frame-src-chip-content" class="frame-src-chip src-input-chip"></span>
                                    <input id="txt-framesrc" autocomplete="off" class="form-control validation-padding txt-holder txt-input-src" placeholder="@T["Enter a list of URLs separated by commas"]" maxlength="253">
                                </span>
                                <span class="frame-src-validation validation-errors"></span>
                            </div>
                        </form>
                    </div>
                    <div class="bi-page-footer col-xs-12 no-padding">
                        <div class="bi-page-actions col-xs-12 col-md-12 no-margin">
                            <a href="@Url.Action("Index", "Home")" class="secondary-button app-btn-secondary pull-right" id="cancel-site-settings" title="">@T["Cancel"]</a>
                            <button type="button" title="" id="update-csp-settings" name="UpdateSystemSettings" class="primary-button app-btn-primary pull-right">
                                @T["Save"]
                            </button>
                        </div>
                    </div>
                </div>
                <div role="tabpanel" class="tab-pane col-md-12 col-xs-12 col-sm-12 bi-page-body @isXFrameTab" id="x-frame-options">
                    @await Html.PartialAsync("_XFrameOptionsSettings")
                </div>
            </div>
        </div>
        @await Html.PartialAsync("../Shared/_Footer", new ViewDataDictionary(ViewData) { { "appsettings", globalAppSettings } })
    </div>
    <environment include="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/content-security-policy.js"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <script asp-append-version="true" src="@dashboardServerResourceUrl/cdn/scripts/content-security-policy.min.js"></script>
    </environment>
}